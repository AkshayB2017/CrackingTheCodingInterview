Bit Manipulation:

-Operations with bits are used in Data compression (data is compressed by converting it from one representation to another, to reduce the space) ,Exclusive-Or Encryption (an algorithm to encrypt the data for safety issues). In order to encode, decode or compress files we have to extract the data at bit level. Bitwise Operations are faster and closer to the system and sometimes optimize the program to a good level.

1 byte comprises of 8 bits and any integer or character can be represented using bits in computers, which we call its binary form(contains only 1 or 0) or in its base 2 form

Bitwise Operators: 

Bit operations are fast and can be used in optimizing time complexity. 

NOT(~): Unary operator which flips the bits of the number.

N=5 =(101)
~N= ~(101)=(010)=2

AND(&):  Binary operator that operates on two equal length bit patterns. If compared position of the bit patterns are 1, the resultant is 1 else it is 0.
 A = 5 = (101)2 , B = 3 = (011)2 A & B = (101)2 & (011)2= (001)2 = 1 

OR(|): Binary operators that operates on two equal length bit patterns. If compared position of one of the bit patterns are 1, resultant is 1 else it is 0.
A = 5 = (101)2 , B = 3 = (011)2
A | B = (101)2 | (011)2 = (111)2 = 7 


XOR ( ^ ): Bitwise XOR also takes two equal-length bit patterns. If both bits in the compared position of the bit patterns are 0 or 1, the bit in the resulting bit pattern is 0, otherwise 1.
A = 5 = (101)2 , B = 3 = (011)2
A ^ B = (101)2 ^ (011)2 = (110)2 = 6 

Left Shift ( << ): Left shift operator is a binary operator which shift the some number of bits, in the given bit pattern, to the left and append 0 at the end. Left shift is equivalent to multiplying the bit pattern with 2k ( if we are shifting k bits ).
1 << 1 = 2 = 21
1 << 2 = 4 = 22 1 << 3 = 8 = 23
1 << 4 = 16 = 24
…
1 << n = 2n 

Right Shift ( >> ): Right shift operator is a binary operator which shift the some number of bits, in the given bit pattern, to the right and append 1 at the end. Right shift is equivalent to dividing the bit pattern with 2k ( if we are shifting k bits ).
4 >> 1 = 2
6 >> 1 = 3
5 >> 1 = 2
16 >> 4 = 1 

------------------------------------------------------------------------------

Facts

1. Left shift and right shift operators should not be used for negative operators.

Result of -1<<1 and 1<<-1 are undefined.


2. Bitwise XOR opertor is the most useful operator

3. Bitwise operators should not be used in place of logical operators

The result of logical operators (&&, || and !) is either 0 or 1, but bitwise operators return an integer value.

4. Left shift and right shift operators are equivalent to multiplication and division by 2 respectively.

5. & Operator can be used to quickly check if number is even or odd.

6. Use ~ carefully.

-------------------------------------------------------------------

Q. Compute XOR from 1 to n (direct method) : 

// Direct XOR of all numbers from 1 to n 
int computeXOR(int n) 
{ 
	if (n % 4 == 0) 
		return n; 
	if (n % 4 == 1) 
		return 1; 
	if (n % 4 == 2) 
		return n + 1; 
	else
		return 0; 
} 
O/P: Input : n = 6
Output : 7



Q. How to know if a number is a power of 2? 


bool isPowerOfTwo(int x) 
{ 
	return x && (!(x & (x - 1))); 
} 

Q.Convert binary code directly into an integer in C++.

#include <iostream> 
using namespace std; 
  
int main() 
{ 
    auto number = 0b011; 
    cout << number; 
    return 0; 
} 

Q.The Quickest way to swap two numbers:

a ^= b;
b ^= a; 
a ^= b;


Q.Simple approach to flip the bits of a number: It can be done by a simple way, just simply subtract the number from the value obtained when all the bits are equal to 1 .
For example:

Number : Given Number
Value  : A number with all bits set in given number.
Flipped number = Value – Number.

Example : 
Number = 23,
Binary form: 10111;
After flipping digits number will be: 01000;
Value: 11111 = 31;

Q.We can find the most significant set bit in O(1) time for a fixed size integer.

int setBitNumber(int n) 
{	 
	// Below steps set bits after 
	// MSB (including MSB) 

	// Suppose n is 273 (binary 
	// is 100010001). It does following 
	// 100010001 | 010001000 = 110011001 
	n |= n>>1; 

	// This makes sure 4 bits 
	// (From MSB and including MSB) 
	// are set. It does following 
	// 110011001 | 001100110 = 111111111 
	n |= n>>2; 

	n |= n>>4; 
	n |= n>>8; 
	n |= n>>16; 
	
	// Increment n by 1 so that 
	// there is only one set bit 
	// which is just before original 
	// MSB. n now becomes 1000000000 
	n = n + 1; 

	// Return original MSB after shifting. 
	// n now becomes 100000000 
	return (n >> 1); 
} 
